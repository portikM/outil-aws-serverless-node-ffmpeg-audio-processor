service: outil-audio

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  region: ca-central-1
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:GetObject
            - s3:GetObjectAcl
            - s3:ListBucket
            - s3:DeleteObject
          Resource: "arn:aws:s3:::${self:custom.outputBucket}/*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectAcl
            - s3:DeleteObject
            - s3:ListBucket
          Resource: "arn:aws:s3:::${self:custom.inputBucket}/*"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: "arn:aws:s3:::${self:custom.inputBucket}"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: "arn:aws:s3:::${self:custom.outputBucket}"
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource: ${self:custom.checkS3Queue.arn}
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
          Resource: ${self:custom.checkS3Queue.arn}

  environment:
    INPUT_BUCKET: ${self:custom.inputBucket}
    OUTPUT_BUCKET: ${self:custom.outputBucket}
    CHECK_S3_QUEUE_URL: ${self:custom.checkS3Queue.url}

functions:
  getUploadUrl:
    handler: get-upload-url/handler.getSignedUrl
    events:
      - httpApi:
          path: /upload
          method: get
  concatStash:
    handler: audio-stash/handler.concatStash
    events:
      - httpApi:
          path: /stash
          method: post
    timeout: 28
    layers:
      - { Ref: FfmpegLambdaLayer }
  trim:
    handler: audio-trim/handler.trim
    events:
      - httpApi:
          path: /trim
          method: post
    timeout: 28
    layers:
      - { Ref: FfmpegLambdaLayer }
  deleteS3Object:
    handler: delete-s3-object/handler.deleteS3Object
    events:
      - sqs:
          arn: ${self:custom.checkS3Queue.arn}
          batchSize: 1
      - httpApi:
          path: /delete
          method: post
  checkAndEmptyS3:
    handler: check-empty-s3/handler.checkAndEmptyS3
    events:
      - schedule: rate(12 hours)

resources:
  Resources:
    CheckS3Queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.checkS3Queue.name}
    Input:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.inputBucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: [GET, PUT]
              AllowedOrigins: ["*"]
              Id: CORSRuleId1
              MaxAge: "3600"

layers:
  ffmpeg:
    path: layer

custom:
  inputBucket: ${file(env.${opt:stage, 'dev'}.yml):INPUT_BUCKET}
  outputBucket: ${file(env.${opt:stage, 'dev'}.yml):OUTPUT_BUCKET}
  checkS3Queue:
    name: CheckS3Queue-${opt:stage, 'dev'}
    arn: !GetAtt CheckS3Queue.Arn
    url: !Ref CheckS3Queue
